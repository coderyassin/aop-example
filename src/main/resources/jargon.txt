******************************************** Aspect ********************************************
 An aspect is a module containing cross-cutting concerns (such as logging, transaction management,
 or security) that can be applied across different parts of the application.

******************************************** Advice ********************************************
 An advice is the specific action performed at a certain moment in the application execution flow.
 Types of Advice:
 Before Advice: Executes logic before a target method.
 After Advice: Executes logic after a target method.
 AfterReturning Advice: Executes logic if the method succeeds.
 AfterThrowing Advice: Executes logic if an exception is thrown.
 Around Advice: Wraps a method to add logic before and after its execution.

******************************************** JoinPoint ********************************************
 A join point is a specific point in the application execution flow where an aspect can intervene.
 For example, calling a method, handling exceptions, or accessing a field.
 Example:
 A join point could be a method call to UserService.getUserDetails().

******************************************** Pointcut ********************************************
 A pointcut is an expression that designates one or more join points in the application execution flow.
 It determines where an advice should be applied.

******************************************** Weaving ********************************************
 Weaving is the process of applying an aspect to an application.
 It involves injecting the aspect logic into the points defined by the pointcut.
 Types of weaving:
 Compile-Time Weaving: Injection at compile time (requires AspectJ compiler).
 Load-Time Weaving: Injection when the JVM loads classes into memory.
 Runtime Weaving: Injection at runtime via dynamic proxies (like Spring AOP).

******************************************** Target Object ********************************************
 A target object is the actual object to which an aspect is applied. This object is typically a Spring bean.

******************************************** Proxy ********************************************
 A proxy is an object generated by the framework to encapsulate a target object,
 with additional logic (such as aspect hints) applied around the normal behavior.
 Spring AOP uses dynamic proxies via JDK Proxy or CGLIB.

******************************************** Cross-Cutting Concern ********************************************
 A cross-cutting concern is a cross-cutting concern, that is, logic that is common to multiple parts of an application.
 Examples: Logging, security, transaction management.

******************************************** Aspect Weaving Instrumentation ********************************************
 The process or technology for performing aspect weaving on existing code.
 Spring AOP typically uses dynamic proxies for this, while AspectJ allows for deeper static weaving.

******************************************** JoinPoint API ********************************************
 The JoinPoint API provides additional information about the executed join point, such as the method name or arguments.